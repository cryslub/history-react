/**
 * dat.globe Javascript WebGL Globe Toolkit
 * https://github.com/dataarts/webgl-globe
 *
 * Copyright 2011 Data Arts Team, Google Creative Lab
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 */
import * as THREE from 'three';
import * as d3 from "d3";
import * as JSZip from "jszip";
import * as JSZipUtils from "jszip-utils";
import * as earcut from "earcut";


var DAT = DAT || {};

class Globe  {
	
	constructor(container, opts){
		
		this.container = container;
		
		this.roadColors = {
				  "normal":new THREE.Color( 0xAB9B5D),
				  "water":new THREE.Color( 0xA2C5FF),
				  "high":new THREE.Color( 0x6E6957),
				  "mountain":new THREE.Color( 0x82A876),
				  "desert":new THREE.Color( 0xECB480) 
			  }
		
		  this.opts = opts || {};
		  
		  this.colorFn = this.opts.colorFn || function(x) {
		    var c = new THREE.Color();
		    c.setHSL( ( 0.6 - ( x * 0.5 ) ), 1.0, 0.5 );
		    return c;
		  };

		  
		  this.Shaders = {
		    'earth' : {
		      uniforms: {
		        'texture': { type: 't', value: null }
		      },
		      vertexShader: [
		        'varying vec3 vNormal;',
		        'varying vec2 vUv;',
		        'void main() {',
		          'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
		          'vNormal = normalize( normalMatrix * normal );',
		          'vUv = uv;',
		        '}'
		      ].join('\n'),
		      fragmentShader: [
		        'uniform sampler2D texture;',
		        'varying vec3 vNormal;',
		        'varying vec2 vUv;',
		        'void main() {',
		          'vec3 diffuse = texture2D( texture, vUv ).xyz;',
		          'float intensity = 1.05 - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) );',
		          'vec3 atmosphere = vec3( 1.0, 1.0, 1.0 ) * pow( intensity, 3.0 );',
		          'gl_FragColor = vec4( diffuse + atmosphere, 1.0 );',
		        '}'
		      ].join('\n')
		    },
		    'atmosphere' : {
		      uniforms: {},
		      vertexShader: [
		        'varying vec3 vNormal;',
		        'void main() {',
		          'vNormal = normalize( normalMatrix * normal );',
		          'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
		        '}'
		      ].join('\n'),
		      fragmentShader: [
		        'varying vec3 vNormal;',
		        'void main() {',
		          'float intensity = pow( 0.8 - dot( vNormal, vec3( 0, 0, 1.0 ) ), 12.0 );',
		          'gl_FragColor = vec4( 1.0, 1.0, 1.0, 1.0 ) * intensity;',
		        '}'
		      ].join('\n')
		    }
		  };

		  var  w, h;
		  var atmosphere;

		  var overRenderer;

		  var curZoomSpeed = 0;
		  var zoomSpeed = 50;

		  this.mouse = { x: 0, y: 0 };
		  this.mouseOnDown = { x: 0, y: 0 };
		  this.rotation = { x: 0, y: 0 };
		  this.target = { x: Math.PI*3/2, y: Math.PI / 6.0 };
		  this.targetOnDown = { x: 0, y: 0 };

		  this.distance = 100000;
		  this.distanceTarget = 100000;
		  
		  var padding = 40;
		  this.PI_HALF = Math.PI / 2;

		  this.totalSize = 0.5;
		  this.radius = 200*this.totalSize;
		  
		  this.textlabels = [];
		  
		  

		  this.loaded = false;
		  
		  
		  
		  this.animate = this.animate.bind(this);
		  this.onTouchMove = this.onTouchMove.bind(this);		 
		  this.init = this.init.bind(this);
		  this.drawLines = this.drawLines.bind(this);
		  this.drawGeoJson = this.drawGeoJson.bind(this);
		  this.drawCoordinate = this.drawCoordinate.bind(this);
		  this.makeFace = this.makeFace.bind(this);
		  this.gpsToVector = this.gpsToVector.bind(this);
		  this.vertex = this.vertex.bind(this);
		  this.wireframe = this.wireframe.bind(this);
		  this.addData = this.addData.bind(this);
		  this.createPoints = this.createPoints.bind(this);
		  this.addVertex = this.addVertex.bind(this);
		  this.addLines = this.addLines.bind(this);
		  this.addPoint = this.addPoint.bind(this);

		  this.addDom = this.addDom.bind(this);
		  this.detail = this.detail.bind(this);
		  this.createTextLabel = this.createTextLabel.bind(this);
		  
		  this.globePoint = this.globePoint.bind(this);
		  this.move = this.move.bind(this);
		  this.remove = this.remove.bind(this);
		  this.distanceTo = this.distanceTo.bind(this);
		  
		  this.onClick = this.onClick.bind(this);
		  this.onMouseDown = this.onMouseDown.bind(this);
		  this.onMouseMove = this.onMouseMove.bind(this);
		  this.onMouseUp = this.onMouseUp.bind(this);		  
		  this.onMouseOut = this.onMouseOut.bind(this);
		  this.onMouseWheel = this.onMouseWheel.bind(this);
		  this.onDocumentKeyDown = this.onDocumentKeyDown.bind(this);
		  this.onWindowResize = this.onWindowResize.bind(this);
		  this.zoom = this.zoom.bind(this);
		  this.render = this.render.bind(this);
		  this.moveCameraTo = this.moveCameraTo.bind(this);

		  
		  
		  
		  this.init();
	}

  
   init() {

	   var self = this;
	   
	 this.moveCameraTo(34,36,300);
	 
    this.container.style.color = '#fff';
    this.container.style.font = '13px/20px Arial, sans-serif';

    var shader, uniforms, material;
    var w = this.container.offsetWidth || window.innerWidth;
    var h = this.container.offsetHeight || window.innerHeight;

    this.camera = new THREE.PerspectiveCamera(30, w / h, 1, 10000);
    this.camera.position.z = this.distance;

    this.scene = new THREE.Scene();

    var geometry = new THREE.SphereGeometry(this.radius-1*this.totalSize, 40, 30);

    shader = this.Shaders['earth'];
    uniforms = THREE.UniformsUtils.clone(shader.uniforms);

//    uniforms['texture'].value = THREE.ImageUtils.loadTexture(imgDir+'world.jpg');

    var water =0x4B76C0;
    material =  new THREE.MeshBasicMaterial( {color: water} );
//    material = new THREE.ShaderMaterial({
//
//          uniforms: uniforms,
//          vertexShader: shader.vertexShader,
//          fragmentShader: shader.fragmentShader
//
//        });

    this.mesh = new THREE.Mesh(geometry, material);
    this.mesh.rotation.y = Math.PI;
    this.scene.add(this.mesh);

    shader = this.Shaders['atmosphere'];
    uniforms = THREE.UniformsUtils.clone(shader.uniforms);

    material = new THREE.ShaderMaterial({

          uniforms: uniforms,
          vertexShader: shader.vertexShader,
          fragmentShader: shader.fragmentShader,
          side: THREE.BackSide,
          blending: THREE.AdditiveBlending,
          transparent: true

        });

    this.mesh = new THREE.Mesh(geometry, material);
    this.mesh.scale.set( 1.1, 1.1, 1.1 );
//    scene.add(mesh);

    geometry = new THREE.BoxGeometry(0.75, 0.75, 1);
    geometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0,0,-0.5));

    this.point = new THREE.Mesh(geometry);

    this.renderer = new THREE.WebGLRenderer({antialias: true});
    this.renderer.setSize(w, h);

    this.renderer.domElement.style.position = 'absolute';

    this.container.appendChild(this.renderer.domElement);

    this.container.addEventListener('click', this.onClick, false);

    this.container.addEventListener('mousedown', this.onMouseDown, false);

    this.container.addEventListener('mousewheel', this.onMouseWheel, false);

    document.addEventListener('keydown', this.onDocumentKeyDown, false);

    window.addEventListener('resize', this.onWindowResize, false);

    window.addEventListener('mousemove', this.onTouchMove, false);
    
    this.container.addEventListener('mouseover', function(event) {
      this.overRenderer = true;
      
    }, false);

    this.container.addEventListener('mouseout', function() {
    	this.overRenderer = false;
    }, false);
    
    var light = new THREE.PointLight( 0xffffff );
    light.position.z = 300;
    this.scene.add( light );
    
    
    
    
    var arr = [{
    	file:"http://localhost:8001/json/rivers_simplify.json",
    	color:water,
    	radius:this.radius+0.1*this.totalSize
    },
    {
    	file:"http://localhost:8001/json/reefs.json",
    	color:0x63ABC1,
    	radius:this.radius+0.1*this.totalSize
    }];
    
    
    arr.forEach(function(item){
        d3.json(item.file, function(error, data) {
        	  if (error) throw error;
//        	  scene.add(graticule = wireframe(graticule10(), new THREE.LineBasicMaterial({color: 0xaaaaaa})));
//        	  scene.add(mesh = wireframe(topojson.mesh(topology, topology), new THREE.LineBasicMaterial({color: 0x4682B4})));

        	  var geo = new THREE.Geometry;

        	  data.geometries.forEach(function(geometry) {
        		  
        		  if(geometry.type == 'LineString'){
        			  this.drawLines(geo,geometry.coordinates);
        		  }
        		  
        		  if(geometry.type == 'MultiLineString'){
        			geometry.coordinates.forEach(function(coordinates){
        				this.drawLines(geo,coordinates);  				
        			});
        		  }
      	  });
      		  
      		  
      		this.scene.add( new THREE.LineSegments(geo, new THREE.LineBasicMaterial({color: item.color})));

        	});
    });


    
   
    
    

	var materials = [
		  new THREE.MeshBasicMaterial({
		        color: 0x9F907A,
		        morphTargets: false,
		        side: THREE.DoubleSide
		      }),
		      
		new THREE.MeshBasicMaterial({
	        color: 0x0F5C0F,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
      new THREE.MeshBasicMaterial({  //desert
	        color: 0xFFE99E,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
      new THREE.MeshBasicMaterial({ //stone
	        color: 0x9F907A,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
    
      new THREE.MeshBasicMaterial({
	        color: 0x297229,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
      new THREE.MeshBasicMaterial({
	        color: 0x9E8C5B,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
      new THREE.MeshBasicMaterial({
	        color: 0x665147,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
      new THREE.MeshBasicMaterial({
	        color: 0xFFE6B3,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
      new THREE.MeshBasicMaterial({ ////dry grassland
	        color: 0x74896C,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
      new THREE.MeshBasicMaterial({
	        color: 0xffffff,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
      new THREE.MeshBasicMaterial({ // thick forest
	        color: 0x0D490D,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      }),
	      new THREE.MeshBasicMaterial({ // thick forest
		        color: water,
		        morphTargets: false,
		        side: THREE.DoubleSide
		      })

	]

	var map =[
		0,
		1,
		4,
		6,
		4,
		3,
		1,
		4,
		5,
		5,
		5,
		3,
		4,
		2,
		3
	]
	JSZipUtils.getBinaryContent('http://localhost:8001/json/wwf_terr_ecos.zip', function(err, fileData) {
	    if(err) {
	        throw err; // or handle err
	    }

	    var zip = new JSZip();
	    
	    zip.loadAsync(fileData).then(function (contents) {
	        // ...
	    	
	    	 Object.keys(contents.files).forEach(function(filename) {
	    		 zip.file(filename).async('string').then(function(content) {

	        	    	
	                	
	        	    	var geo = new THREE.Geometry();
	        	 		var material =  new THREE.MeshBasicMaterial({
	        	 	        color: 0xaaaaaa,
	        	 	        morphTargets: false,
	        	 	        side: THREE.DoubleSide
	        	 	      });
	        	 		
	        	 		
	        	 		var data = JSON.parse(content);
	        	    	data.features.forEach(function(feature){
	        				if(feature.geometry != null){
	        					if(feature.geometry.coordinates != undefined){
	        						if(feature.geometry.coordinates.length>0){
	        							var color = 1;
	        							if(feature.properties != undefined){
	        								
	        								if(feature.properties.BIOME>=map.length) console.log(feature.properties.BIOME);
	        								color = map[feature.properties.BIOME];
	        								
	        								
	        							}
	        							
	        							if(feature.properties.BIOME==13){
	        								if(feature.properties.GBL_STAT == 1){
//	        									console.log(feature.properties);
	        									color=7;
	        									if(feature.properties.G200_STAT  ==2){
	        										color = 3;
	        									}
	        								}
	        								if(feature.properties.GBL_STAT == 2){
//	        									console.log(feature.properties);
	        									if(feature.properties.G200_STAT  ==3){
	        										color = 7;
	        									}
	        								}
	        								if(feature.properties.GBL_STAT == 3){
//	        									console.log(feature.properties);
	        									color=3;

	        								}
	        								
	        								if(feature.properties.ECO_NUM == 1){
//	        									console.log(feature.properties);
	        									color=8;

	        								}
	        								if(feature.properties.ECO_NUM == 3){
//	        									console.log(feature.properties);
	        									color=2;

	        								}
	        								

	        							}
	        							if(feature.properties.BIOME==4){
	        								if(feature.properties.GBL_STAT == 1){
	        									//console.log(feature.properties);
	        									if(feature.properties.G200_STAT  ==1){
	        										color=1;
	        									}

	        								}
	        								if(feature.properties.GBL_STAT == 2){
	        									color=8;
	        									
	        								}
	        								if(feature.properties.GBL_STAT == 3){
	        									color=10;
	        									
	        								}
	        								
	        							}
	        							if(feature.properties.BIOME==98){
	        								color = 11;
	        							}
	        							if(feature.geometry.type == 'Polygon'){
	        								this.drawCoordinate(geo,feature.geometry.coordinates,this.radius,color);
	        							}
	        							if(feature.geometry.type == 'MultiPolygon'){
	        								feature.geometry.coordinates.forEach(function(coordinate){
	        									this.drawCoordinate(geo,coordinate,this.radius,color);
	        								
	        								});
	        							}
	        						}
	        					}
	        				}
	        			}); 
	        	    	
	        	    	var m = new THREE.Mesh( geo, materials );
	        	      	
	        			this.scene.add(  m);
	        			
	        			self.loaded = true;
	                });
	            });
	    	 
	    
	    });
	});
//    $.getJSON("json/wwf_terr_ecos.json", function(data) {
//
//    		
//      });
    
   
	 var jsons = [{
	    	file:"http://localhost:8001/json/lakes.json",
	    	color:water,
	    	radius:this.radius+0.05
	    },{
	    	file:"http://localhost:8001/json/glaciated.json",
	    	color:0xEFF4FF,
	    	radius:this.radius+0.5
	    },{
	    	file:"http://localhost:8001/json/playas.json",
	    	color:0xffffff,
	    	radius:this.radius+0.1
	    },{
	    	file:"http://localhost:8001/json/earth-rivers-simplify.json",
	    	color:water,
	    	radius:this.radius+0.05
	    },{
	    	file:"http://localhost:8001/json/bathymetry_K_200.json",
	    	color:0x1A448B,
	    	radius:this.radius+0.05
	    }];
	    
	    jsons.forEach(function(json){
	    	d3.json(json.file, function(error, data) {
	        	this.drawGeoJson(json.color,data,json.this.radius);
	    		
	    	});
	    	

	    	
	    });
    
//    $.getJSON("json/ocean.json", function(data) {

//    	drawGeoJson(0x1E90FF,data);
		  
//    });
		
  }
  
  
   drawLines(geo,coordinates){
	  for(var i = 0 ; i<coordinates.length; i++){
		  if(i>0){
		      geo.vertices.push(this.vertex(coordinates[i-1]), this.vertex(coordinates[i]));
		  }  				  
	  }
  }
  
   drawGeoJson(color,data,radius){

	  var geo = new THREE.Geometry();
		var material =  new THREE.MeshBasicMaterial({
	        color: color,
	        morphTargets: false,
	        side: THREE.DoubleSide
	      });

		
		if(data.type=="GeometryCollection"){
		
		  	data.geometries.forEach(function(geometry){
		  		
		  		if(geometry.type=='MultiPolygon'){
		  			geometry.coordinates.forEach(function(coordinate){
		  				this.drawCoordinate(geo,coordinate,radius);
		  			});
		  		}else{
		  			
		  			this.drawCoordinate(geo,geometry.coordinates,radius);
		  		
	
		  		}
		  		
		  	});
		}
		
	
	
	  	var m = new THREE.Mesh( geo, material );
  	
		this.scene.add(  m);
  }

  
   drawCoordinate(geo,coordinate,radius,color){
		var d = earcut.flatten(coordinate);
  		var triangles = earcut(d.vertices, d.holes, d.dimensions);
  		
  		
  		var i = 0;

  		for(;i<triangles.length;i+=3){


  			//create a triangular geometry
  			var pointA = new THREE.Vector3(d.vertices[triangles[i]*2],d.vertices[triangles[i]*2+1],0);
  			var pointB = new THREE.Vector3(d.vertices[triangles[i+1]*2],d.vertices[triangles[i+1]*2+1],0);
  			var pointC = new THREE.Vector3(d.vertices[triangles[i+2]*2],d.vertices[triangles[i+2]*2+1]);
  			
  			this.makeFace(geo,pointA,pointB,pointC,radius,color);
  			
  		}
  		

  }
  
   makeFace(geo,pointA,pointB,pointC,radius,color){
	  
		var max =12;

		
	   var arr = [{
		   distance:pointA.distanceTo( pointB ),
		   point1:pointA,
		   point2:pointB,
		   point3:pointC		   
	   },{
		   distance:pointA.distanceTo( pointC ),
		   point1:pointA,
		   point2:pointC,
		   point3:pointB		   
	   },{
		   distance:pointB.distanceTo( pointC ),
		   point1:pointB,
		   point2:pointC,
		   point3:pointA		   
	   }]
	  
	   arr.sort(function (a, b) {
		  return b.distance - a.distance;
		});
	   
	   
	   if(arr[0].distance > max){
		   
		   var a = arr[0];
		   
			var dir = new THREE.Vector3();
			
			  dir.subVectors( a.point1, a.point2 ).normalize();
					  
			  dir.multiplyScalar(a.distance/2);
			  
			  var mid = new THREE.Vector3(a.point2.x,a.point2.y,a.point2.z);
			  
			  mid.add(dir);
			  
			  this.gpsToVector(geo,a.point1,a.point3,mid,radius,color);
			  this.makeFace(geo,a.point2,a.point3,mid,radius,color);	
	   }
	   
	   else{
		
		
				
				var a = this.gpsToVector(pointA.x,pointA.y,radius);
				var b = this.gpsToVector(pointB.x,pointB.y,radius);
				var c = this.gpsToVector(pointC.x,pointC.y,radius);
					
				geo.vertices.push(  a);
				geo.vertices.push(  b );
				geo.vertices.push(   c);
		
				var normal = new THREE.Vector3( 0, 1, 0 ); //optional
				var c = new THREE.Color( 0xffaa00 ); //optional
				
				//create a new face using vertices 0, 1, 2
				var face = new THREE.Face3( geo.vertices.length-3,geo.vertices.length-2,geo.vertices.length-1,normal,c,color);
		
			//add the face to the geometry's faces array
				geo.faces.push( face );
		}
	  
  }

   gpsToVector(lat,long,radius) {
		
	    var phi = (90 - long) * Math.PI / 180;
	    var theta = (180 - lat) * Math.PI / 180;

	    var sphereSize = radius;
		if(radius != undefined) sphereSize = radius;
		
		  return new THREE.Vector3(
				  sphereSize * Math.sin(phi) * Math.cos(theta),
				  sphereSize * Math.cos(phi),
				  sphereSize * Math.sin(phi) * Math.sin(theta)
		  );		

	}
  
  
	// Converts a point [longitude, latitude] in degrees to a THREE.Vector3.
	 vertex(point,radius) {
		if(point == undefined){
			console.log("point undefined");
			return null;
		}
	    var phi = (90 - point[1]) * Math.PI / 180;
	    var theta = (180 - point[0]) * Math.PI / 180;

	    var sphereSize = 200.1*this.totalSize;
		
	    if(radius != undefined) sphereSize = radius;
	    
		  return new THREE.Vector3(
				  sphereSize * Math.sin(phi) * Math.cos(theta),
				  sphereSize * Math.cos(phi),
				  sphereSize * Math.sin(phi) * Math.sin(theta)
		  );		

	}
	// Converts a GeoJSON MultiLineString in spherical coordinates to a THREE.LineSegments.
	 wireframe(multilinestring, material) {
		
		
		
	  var geometry = new THREE.Geometry;
	  multilinestring.coordinates.forEach(function(line) {
	    d3.pairs(line.map(this.vertex), function(a, b) {
	      geometry.vertices.push(a, b);
	    });
	  });
	  
	  
	  return new THREE.LineSegments(geometry, material);
	}
	// See https://github.com/d3/d3-geo/issues/95
	

  
  
   addData(data, opts) {
 
	  
	  this.textlabels.forEach(function(text){
		  if(text.added) this.container.removeChild(text.element); 
	  });
	  
	  this.textlabels = [];
	  
	  if( this._baseGeometry != undefined){
//		  while (scene.children.length>8)
//		  {
//			  scene.remove(scene.children[8]);
//		  }
		  
	  }
	  
	  var lat, lng, size, color, i, step, colorFnWrapper;

    opts.animated = opts.animated || false;
    this.is_animated = opts.animated;
    opts.format = opts.format || 'magnitude'; // other option is 'legend'
    if (opts.format === 'magnitude') {
      step = 3;
      colorFnWrapper = function(data, i) { return this.colorFn(data[i+2]); }
    } else if (opts.format === 'legend') {
      step = 4;
      colorFnWrapper = function(data, i) { return this.colorFn(data[i+3]); }
    } else {
      throw('error: format not supported: '+opts.format);
    }

    if (opts.animated) {
      if (this._baseGeometry === undefined) {
        this._baseGeometry = new THREE.Geometry();
        data.forEach(function(city){
            color = colorFnWrapper(data,i);
        	size = 0;
        	this.addPoint(city, size, color, this._baseGeometry);

        });
      }
      if(this._morphTargetId === undefined) {
        this._morphTargetId = 0;
      } else {
        this._morphTargetId += 1;
      }
      opts.name = opts.name || 'morphTarget'+this._morphTargetId;
    }
    var subgeo = new THREE.Geometry();
    data.forEach(function(city){
        color = colorFnWrapper(data,i);

        if(city.color != null){
        	color = new THREE.Color(city.color);
        
        }
        
        city.object = this.addPoint(city, city.population, color,subgeo);
        

    });

    if (opts.animated) {
      this._baseGeometry.morphTargets.push({'name': opts.name, vertices: subgeo.vertices});
    } else {
      this._baseGeometry = subgeo;
    }

  }
  

   createPoints() {
    if (this._baseGeometry !== undefined) {
    	
    	this.scene.remove(this.points);

    	
      if (this.is_animated === false) {
        this.points = new THREE.Mesh(this._baseGeometry, new THREE.MeshBasicMaterial({
              color: 0xffffff,
              vertexColors: THREE.FaceColors,
              morphTargets: false
            }));
      } else {
        if (this._baseGeometry.morphTargets.length < 8) {
          console.log('t l',this._baseGeometry.morphTargets.length);
          var padding = 8-this._baseGeometry.morphTargets.length;
          console.log('padding', padding);
          for(var i=0; i<=padding; i++) {
            console.log('padding',i);
            this._baseGeometry.morphTargets.push({'name': 'morphPadding'+i, vertices: this._baseGeometry.vertices});
          }
        }
        this.points = new THREE.Mesh(this._baseGeometry, new THREE.MeshBasicMaterial({
              color: 0xffffff,
              vertexColors: THREE.FaceColors,
              morphTargets: true
            }));
      }
      this.scene.add(this.points);
    }
  }
  
 

  
  
   addVertex(vertices,colors,start,end,type){
	  
	    vertices.push(start.x);
	    vertices.push(start.y);
	    vertices.push(start.z);

	    colors.push(this.roadColors[type].r);
	    colors.push(this.roadColors[type].g);
	    colors.push(this.roadColors[type].b);

	    vertices.push(end.x);
	    vertices.push(end.y);
	    vertices.push(end.z);

	    colors.push(this.roadColors[type].r);
	    colors.push(this.roadColors[type].g);
	    colors.push(this.roadColors[type].b);
	    
	  
//	  geo.vertices.push(start,end);
//	  geo.colors.push(	roadColors[type]);	  
//	  geo.colors.push(roadColors[type]);	  

}


   addLines(lines) {
	  
	  var geo = new THREE.BufferGeometry;

	  var sphereSize = this.radius+0.2*this.totalSize;
	
	  var vertices = [];
	  var colors = [];
	  
	  lines.forEach(function(line){
		  
		  if(line.waypoint != "" && line.waypoint != null){
			  var waypoint = JSON.parse(line.waypoint);
			  
			  for(var i = 0;i<waypoint.length;i++){
				  if(i == 0){
					  this.addVertex(vertices,colors,this.globePoint(line.start.latitude,line.start.longitude,sphereSize),this.vertex(waypoint[0],sphereSize),line.type);
				  }else{
					  this.addVertex(vertices,colors,this.vertex(waypoint[i-1],sphereSize),this.vertex(waypoint[i],sphereSize),line.type);
				  }
			  }
			  this.addVertex(vertices,colors,this.vertex(waypoint[waypoint.length-1],sphereSize),this.globePoint(line.end.latitude,line.end.longitude,sphereSize),line.type);
			  
			  
		  }else{
			  this.addVertex(vertices,colors,this.globePoint(line.start.latitude,line.start.longitude,sphereSize),this.globePoint(line.end.latitude,line.end.longitude,sphereSize),line.type);
		  }
		  

	  });
	  
//	  for ( var i = 0; i < geo.vertices.length; i+=2 ) {
//		  geo.colors[ i ] = new THREE.Color( 0xAB9B5D);
//		  geo.colors[ i + 1 ] = geo.colors[ i ];
//		}

	var material = new THREE.LineBasicMaterial( {
	    color: 0xffffff,
	    vertexColors: THREE.VertexColors
	} );
  
	
	var fvertices = new Float32Array(vertices);
	var fcolors = new Float32Array(colors);
	geo.addAttribute( 'position', new THREE.BufferAttribute( fvertices, 3 ) );
	geo.addAttribute( 'color', new THREE.BufferAttribute( fcolors, 3 ) );
	
	  var mesh  = new THREE.LineSegments(geo, material);
		this.scene.add( mesh);
		
		return mesh;

  }
  
  
   addPoint(city, size, color, subgeo) {

	
	var sphereSize = this.radius-0.1*this.totalSize;
	var geometry;
	
	if(size == 0){
		sphereSize = this.radius+0.1*this.totalSize
		geometry = new THREE.CylinderGeometry( 0.05*this.totalSize, 0.05*this.totalSize, 0.5*this.totalSize,16  );
		
	    
	}else{
		
		
		geometry = new THREE.BoxGeometry(1*this.totalSize, 1*this.totalSize, 0.3*this.totalSize);
		geometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0,0,-0.5));
	}
	
	

	
	
    var material = new THREE.MeshBasicMaterial( {color: color} );

	var point = new THREE.Mesh(geometry,material);


	if(size == 0){
	
		point.geometry.rotateX((-90 * Math.PI) / 180);
	//    point.geometry.translate(0,0,-3);

		
	}else{
	    var scale = Math.cbrt(size*this.totalSize)/100;
	    scale = Math.max( scale, 0.3*this.totalSize );
	//    scale = Math.sqrt(scale);
	    point.scale.x = scale;
	    point.scale.y = scale;
	    point.scale.z = Math.max( scale, 0.8*this.totalSize ); // avoid non-invertible matrix
	
	    
	
	    for (var i = 0; i < point.geometry.faces.length; i++) {
	      point.geometry.faces[i].color = color;
	    }
	    
	    
	    this.addDom(point,city.name,city.labelPosition);

	}

	
    var phi = (90 - city.latitude) * Math.PI / 180;
    var theta = (180 - city.longitude) * Math.PI / 180;

    point.position.x = sphereSize * Math.sin(phi) * Math.cos(theta);
    point.position.y = sphereSize * Math.cos(phi);
    point.position.z = sphereSize * Math.sin(phi) * Math.sin(theta);

    point.lookAt(this.mesh.position);
    
    
    if(point.matrixAutoUpdate){
      point.updateMatrix();
    }
    
    this.scene.add(point);
    
    var geo = new THREE.EdgesGeometry( point.geometry );
    var mat = new THREE.LineBasicMaterial( { color: 0x111111, linewidth: 4 } );
    var wireframe = new THREE.LineSegments( geo, mat );
    wireframe.renderOrder = 1; // make sure wireframes are rendered 2nd
    point.add( wireframe );
    
    return point;
    
  }
  
   addDom(point,name,labelPosition){
		var text = this.createTextLabel();
		text.setHTML(name);
		text.setPoint(point);
		this.textlabels.push(text);
		if(labelPosition =='top'){
			text.element.classList.add("label-top")
		}
	//	container.appendChild(text.element);
  }
  
   detail(city,filter){
	 
	  if(this.detailHtml == undefined){
		  this.detailHtml = this.createTextLabel();
		  
	      this.container.appendChild(this.detailHtml.element);
	  }	 
	  
	  if(city == undefined){
		  this.detailHtml.element.className = "text-hide";
		  return;
	  }
	  
	  this.detailHtml.element.className ="text-detail";
	  
	  var html = "<div><h5>"+city.name+"</h5>";

	  if(city.faction > 0){
		  html +="<strong>"+city.factionData.name+"</strong><br/>";

		  this.detailHtml.element.style.backgroundColor = city.factionData.color;
	  }else{
		  this.detailHtml.element.style.backgroundColor = "#000";
		  
	  }
	  if(city.population > 0){
		  html +="<span class='glyphicon glyphicon-user'> </span> "+filter('number')(city.population);
	  }
	  
	  html 	+="</div>";

	  
	 
		  
	  this.detailHtml.setHTML(html);
	  this.detailHtml.setPoint(city.object);
	  this.detailHtml.updatePosition(true);

  }
  
   createTextLabel() {
    var div = document.createElement('div');
    div.className = 'text-label';
    div.style.position = 'absolute';
    div.style.width = 100;
    div.style.height = 100;
    div.innerHTML = "hi there!";
    div.style.top = -1000;
    div.style.left = -1000;
    
    var _this = this;
    
    return {
      element: div,
      point: false,
      position: new THREE.Vector3(0,0,0),
      added:false,
      setHTML: function(html) {
        this.element.innerHTML = html;
      },
      setPoint: function(threejsobj) {
        this.point = threejsobj;
      },
      updatePosition: function(show) {
        if(this.point) {
          this.position.copy(this.point.position);
        }
        
        var coords2d = this.get2DCoords(this.position, this.camera);
        this.element.style.left = coords2d.x + 'px';
        this.element.style.top = coords2d.y + 'px';

       
        if(show!=true){
        	var distance = this.parent.position.distanceTo(this.camera.position);
	        	
        	var a = this.parent.scale.x / 0.3;
        	
        	if(distance < Math.pow(a,2) * 80){
	        	this.element.classList.remove("text-hide");
	        	if(!this.added) this.container.appendChild(this.element);
             	this.added  = true;
        	}else{
        		this.element.classList.add("text-hide");
        		if(this.added) this.container.removeChild(this.element); 
             	this.added  = false;
        		
        	}
        	
	        if(distance> 400){
        		this.element.classList.add("text-hide");
        		if(this.added) this.container.removeChild(this.element); 
             	this.added  = false;
	        }
	        
        }

	        	

      },
      get2DCoords: function(position, camera) {
        var vector = position.project(camera);
        vector.x = (vector.x + 1)/2 * window.innerWidth;
        vector.y = -(vector.y - 1)/2 * window.innerHeight;
        return vector;
      }
    };
  } 
    
  
   globePoint(lat, lng,sphereSize){
    var phi = (90 - lat) * Math.PI / 180;
    var theta = (180 - lng) * Math.PI / 180;

    var point = {};
    point.x = sphereSize * Math.sin(phi) * Math.cos(theta);
    point.y = sphereSize * Math.cos(phi);
    point.z = sphereSize * Math.sin(phi) * Math.sin(theta);
    
    return point;
  }
  
  
   move(object,target,speed){

	  var dir = new THREE.Vector3();
	  
	  dir.subVectors( target.position, object.position ).normalize();

	 if( object.position.distanceTo(target.position) >= speed){
		  
		  object.position.add(dir.multiplyScalar(speed));
	  
		  return true;
	 }else{
		  object.position.add(dir.multiplyScalar(object.position.distanceTo(target.position)));

		 return false;
	 }
	 // object.position.addScaledVector(target.position.sub(object.position).normalize(), 0.1);
	//   if (target.position.z <= object.position.z) sphere.userData.speed = 0; // stop, when we reached the plane

	//  requestAnimationFrame(animate);
	 // renderer.render(scene, camera);
	  
  }
  
   distanceTo(object,target){
	  return object.position.distanceTo(target.position);
  }
  
   remove(object){
	  this.scene.remove(object);
  }
  
  
//   changeColor(object,color){
//	  
//	  object.material.color = new THREE.Color(color);	  
//	  
//  }
  
   onClick(event){
//	  console.log(event);

	  this.opts.onClick(event,this.camera,this.scene);

  }

   onMouseDown(event) {
    event.preventDefault();

    this.container.addEventListener('mousemove', this.onMouseMove, false);
    this.container.addEventListener('mouseup', this.onMouseUp, false);
    this.container.addEventListener('mouseout', this.onMouseOut, false);

    this.mouseOnDown.x = - event.clientX;
    this.mouseOnDown.y = event.clientY;

    this.targetOnDown.x = this.target.x;
    this.targetOnDown.y = this.target.y;

    this.container.style.cursor = 'move';
  }

   onMouseMove(event) {
    this.mouse.x = - event.clientX;
    this.mouse.y = event.clientY;

    var zoomDamp = this.distance/1000;

    this.target.x = this.targetOnDown.x + (this.mouse.x - this.mouseOnDown.x) * 0.005 * zoomDamp;
    this.target.y = this.targetOnDown.y + (this.mouse.y - this.mouseOnDown.y) * 0.005 * zoomDamp;

    this.target.y = this.target.y > this.PI_HALF ? this.PI_HALF : this.target.y;
    this.target.y = this.target.y < - this.PI_HALF ? - this.PI_HALF : this.target.y;
  }

   onTouchMove( event ) {

		var x, y;

		if ( event.changedTouches ) {

			x = event.changedTouches[ 0 ].pageX;
			y = event.changedTouches[ 0 ].pageY;

		} else {

			x = event.clientX;
			y = event.clientY;

		}

		this.mouse.x = ( x / window.innerWidth ) * 2 - 1;
		this.mouse.y = - ( y / window.innerHeight ) * 2 + 1;

	    

	//	checkIntersection();

	}
  
   onMouseUp(event) {
    this.container.removeEventListener('mousemove', this.onMouseMove, false);
    this.container.removeEventListener('mouseup', this.onMouseUp, false);
    this.container.removeEventListener('mouseout', this.onMouseOut, false);
    this.container.style.cursor = 'auto';
  }

   onMouseOut(event) {
    this.container.removeEventListener('mousemove', this.onMouseMove, false);
    this.container.removeEventListener('mouseup', this.onMouseUp, false);
    this.container.removeEventListener('mouseout', this.onMouseOut, false);
  }

   onMouseWheel(event) {
    event.preventDefault();
    if (this.overRenderer) {
    	this.zoom(event.wheelDeltaY * 0.1);
    }
    return false;
  }

   onDocumentKeyDown(event) {
    switch (event.keyCode) {
      case 38:
        this.zoom(100);
        event.preventDefault();
        break;
      case 40:
    	  this.zoom(-100);
        event.preventDefault();
        break;
    }
  }

   onWindowResize( event ) {
	  this.camera.aspect = window.innerWidth / window.innerHeight;
	    this.camera.updateProjectionMatrix();

	    this.renderer.setSize( window.innerWidth, window.innerHeight );
  }

   zoom(delta) {
    this.distanceTarget -= delta;
    this.distanceTarget = this.distanceTarget > 300 ? 300 : this.distanceTarget;
    this.distanceTarget = this.distanceTarget < 220 *this.totalSize ? 220 *this.totalSize: this.distanceTarget;
  }

   animate() {
	//   console.log(this);
    requestAnimationFrame(this.animate);
    this.render();
  }

   render() {
	   this.zoom(this.curZoomSpeed);

	   this.rotation.x += (this.target.x - this.rotation.x) * 0.1;
	   this.rotation.y += (this.target.y - this.rotation.y) * 0.1;
    this.distance += (this.distanceTarget - this.distance) * 0.3;

    this.camera.position.x = this.distance * Math.sin(this.rotation.x) * Math.cos(this.rotation.y);
    this.camera.position.y = this.distance * Math.sin(this.rotation.y);
    this.camera.position.z = this.distance * Math.cos(this.rotation.x) * Math.cos(this.rotation.y);

    this.camera.lookAt(this.mesh.position);
    
    for(var i=0; i<this.textlabels.length; i++) {
        this.textlabels[i].updatePosition();
     }


    this.opts.onMouseover(this.mouse,this.camera,this.scene);
    
    this.renderer.render(this.scene, this.camera);
    
  }
  
   moveCameraTo(lat,long){
//	  var point = globePoint(lat,long,distance);
	   this.target.x = (270 + long) * Math.PI / 180;
	   this.target.y = lat/180 * Math.PI  ;
	  if(this.distance == undefined){
		  this.distanceTarget = this.distanceTarget > 120 ? 120 : this.distanceTarget;
	  }else  this.distanceTarget = this.distance;
  }
  



};



export default Globe;